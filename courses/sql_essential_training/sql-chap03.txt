-- 01 CREATE TABLE
-- test.db

CREATE TABLE test (
  a INTEGER,
  b TEXT
);

INSERT INTO test VALUES ( 1, 'a' );
INSERT INTO test VALUES ( 2, 'b' );
INSERT INTO test VALUES ( 3, 'c' );
SELECT * FROM test;

-- 02 DROP TABLE
-- test.db

CREATE TABLE test ( a TEXT, b TEXT );
INSERT INTO test VALUES ( 'one', 'two' );
SELECT * FROM test;
DROP TABLE test;
DROP TABLE IF EXISTS test;

-- 03 INSERT INTO
-- test.db

CREATE TABLE test ( a INTEGER, b TEXT, c TEXT );

INSERT INTO test VALUES ( 1, 'This', 'Right here!' ); 
-- do not have to add data to all columns
INSERT INTO test ( b, c ) VALUES ( 'That', 'Over there!' ); 
-- add a row with no values
INSERT INTO test DEFAULT VALUES;
-- insert rows from another table
INSERT INTO test ( a, b, c ) SELECT id, name, description from item;

SELECT * FROM test;

-- 04 DELETE FROM
-- test.db

SELECT * FROM test;
DELETE FROM test WHERE a = 3;

-- audition your delete from statement with a select statement first
SELECT * FROM test WHERE a = 1;
DELETE FROM test WHERE a = 1;

-- 05 NULL
-- test.db

SELECT * FROM test;

-- the following does not work; NULL is not a value, it is the absence of a value
SELECT * FROM test WHERE a = NULL;
-- need to test for NULL
SELECT * FROM test WHERE a IS NULL;
SELECT * FROM test WHERE a IS NOT NULL;
INSERT INTO test ( a, b, c ) VALUES ( 0, NULL, '' );
SELECT * FROM test WHERE b IS NULL;
SELECT * FROM test WHERE b = '';
SELECT * FROM test WHERE c = '';
SELECT * FROM test WHERE c IS NULL;

-- How to preent rows from being inserted without a value

DROP TABLE IF EXISTS test;
CREATE TABLE test (
  a INTEGER NOT NULL,
  b TEXT NOT NULL,
  c TEXT
);

INSERT INTO test VALUES ( 1, 'this', 'that' );
SELECT * FROM test;

-- the next two statements fail; have to supply a value for columns a and b
INSERT INTO test ( b, c ) VALUES ( 'one', 'two' );
INSERT INTO test ( a, c ) VALUES ( 1, 'two' );

-- this statement worksl no restrictions on column c
INSERT INTO test ( a, b ) VALUES ( 1, 'two' );
DROP TABLE IF EXISTS test;

-- 06 Constraints
-- test.db

DROP TABLE IF EXISTS test;
CREATE TABLE test ( a TEXT, b TEXT, c TEXT );
INSERT INTO test ( a, b ) VALUES ( 'one', 'two' );
SELECT * FROM test;

CREATE TABLE test ( a TEXT, b TEXT, c TEXT NOT NULL );
-- give column default value
CREATE TABLE test ( a TEXT, b TEXT, c TEXT DEFAULT 'panda' );
-- ensure every value in column a is unique; NULL values may be exempt from UNIQUE constraint
CREATE TABLE test ( a TEXT UNIQUE, b TEXT, c TEXT DEFAULT 'panda' );
-- combine unique and not null constraints
CREATE TABLE test ( a TEXT UNIQUE NOT NULL, b TEXT, c TEXT DEFAULT 'panda' );

-- 07 ALTER TABLE
-- change schema
-- test.db

DROP TABLE IF EXISTS test;
CREATE TABLE test ( a TEXT, b TEXT, c TEXT );
INSERT INTO test VALUES ( 'one', 'two', 'three');
INSERT INTO test VALUES ( 'two', 'three', 'four');
INSERT INTO test VALUES ( 'three', 'four', 'five');
SELECT * FROM test;

-- add column to existing table
ALTER TABLE test ADD d TEXT;
-- add column with a default value
ALTER TABLE test ADD e TEXT DEFAULT 'panda';

DROP TABLE IF EXISTS test;

-- 08 ID
-- test.db

-- add a unique id to every record; this is for sqlite
-- a table may have only one ID column (ie, primary key)
CREATE TABLE test (
  id INTEGER PRIMARY KEY,
  a INTEGER,
  b TEXT
);

-- id column populates itself
INSERT INTO test (a, b) VALUES ( 10, 'a' );
INSERT INTO test (a, b) VALUES ( 11, 'b' );
INSERT INTO test (a, b) VALUES ( 12, 'c' );
SELECT * FROM test;
DROP TABLE IF EXISTS test;

-- 09 WHERE, LIKE, and IN
-- world.db

SELECT * FROM Country;
SELECT Name, Continent, Population FROM Country 
  WHERE Population < 100000 ORDER BY Population DESC;
SELECT Name, Continent, Population FROM Country 
  WHERE Population < 100000 OR Population IS NULL ORDER BY Population DESC;
SELECT Name, Continent, Population FROM Country 
  WHERE Population < 100000 AND Continent = 'Oceania' ORDER BY Population DESC;
  
-- percent sign is a wildcard; anything before or after 'island'
SELECT Name, Continent, Population FROM Country 
  WHERE Name LIKE '%island%' ORDER BY Name;

-- all countries with 'a' as second letter  
SELECT Name, Continent, Population FROM Country 
  WHERE Name LIKE '_a%' ORDER BY Name;

-- all countries in asia or europe
SELECT Name, Continent, Population FROM Country 
 WHERE Continent IN ( 'Europe', 'Asia' ) ORDER BY Name;

-- 10 SELECT DISTINCT
-- world.db

SELECT Continent FROM Country;
SELECT DISTINCT Continent FROM Country;
-- Using the SELECT DISTINCT statement, you will get only unique results. 

-- test.db

DROP TABLE IF EXISTS test;
CREATE TABLE test ( a int, b int );
INSERT INTO test VALUES ( 1, 1 );
INSERT INTO test VALUES ( 2, 1 );
INSERT INTO test VALUES ( 3, 1 );
INSERT INTO test VALUES ( 4, 1 );
INSERT INTO test VALUES ( 5, 1 );
INSERT INTO test VALUES ( 1, 2 );
INSERT INTO test VALUES ( 1, 2 );
INSERT INTO test VALUES ( 1, 2 );
INSERT INTO test VALUES ( 1, 2 );
INSERT INTO test VALUES ( 1, 2 );
SELECT * FROM test;

SELECT DISTINCT a FROM test;
SELECT DISTINCT b FROM test;
SELECT DISTINCT a, b FROM test;

DROP TABLE IF EXISTS test;

-- 11 ORDER BY
-- world.db

SELECT Name FROM Country;
SELECT Name FROM Country ORDER BY Name;
SELECT Name FROM Country ORDER BY Name DESC;
SELECT Name FROM Country ORDER BY Name ASC;
SELECT Name, Continent FROM Country ORDER BY Continent, Name;
SELECT Name, Continent, Region FROM Country ORDER BY Continent DESC, Region, Name;

-- 12 CASE
-- test.db

DROP TABLE IF EXISTS booltest;
CREATE TABLE booltest (a INTEGER, b INTEGER);
INSERT INTO booltest VALUES (1, 0);
SELECT * FROM booltest;


-- In SQL, 0 is false and anything not 0 is true
SELECT
    CASE WHEN a THEN 'true' ELSE 'false' END as boolA,
    CASE WHEN b THEN 'true' ELSE 'false' END as boolB
    FROM booltest
;

SELECT
  CASE a WHEN 1 THEN 'true' ELSE 'false' END AS boolA,
  CASE b WHEN 1 THEN 'true' ELSE 'false' END AS boolB 
  FROM booltest
;

DROP TABLE IF EXISTS booltest;
